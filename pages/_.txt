const moment = require("moment");
const Rds = require("../../helpers/lambda-rds");
const numeral = require("numeral");
const Slack = require("../../helpers/slack");
const cTable = require("console.table");
const { Parser } = require("json2csv");
var firstBy = require("thenby");

const { v4: uuidv4 } = require("uuid");

const AWS = require("aws-sdk");
const s3 = new AWS.S3();

let knex;
module.exports = async function Run(integrationMap) {
  try {
    const slack = await Slack();
    const startOfWeek = moment()
      .utcOffset(-6)
      .startOf("isoweek")
      .add(-1, "days")
      .startOf("isoweek");

    const endOfWeek = moment()
      .utcOffset(-6)
      .startOf("isoweek")
      .add(-1, "days")
      .endOf("isoWeek");

    const rds = new Rds(integrationMap.customer.name);

    const knex = rds.knex;

    let emailsByProgram = await rds.execute(
      knex
        .table("activities")
        .select(
          "activities.email_name",
          "activities.lead_id",
          "activities.activity_type_id",
          "activities.program_name",
          "activities.primary_attribute_value",
          "activities.channel",
          "marketo_leads.region"
        )
        .join("marketo_leads", "marketo_leads.lead_id", "activities.lead_id")
        .where("activity_date", ">=", startOfWeek)
        .where("activity_date", "<=", endOfWeek)
        .whereIn("activity_type_id", [6, 7, 10, 11, 9])
        .orderBy("activity_type_id", "ASC")
    );

    let activitiesByEmail = {};
    emailsByProgram.forEach((activity) => {
      let parts = activity.primary_attribute_value.split(".");
      parts.pop();

      activity.program_name = parts.join(".");

      const emailAndProgram =
        activity.email_name +
        "-" +
        activity.program_name +
        "-" +
        activity.region;

      if (activity.activity_type_id == 6 && !activitiesByEmail[emailAndProgram])
        activitiesByEmail[emailAndProgram] = {
          email: activity.email_name,
          region: activity.region,
          program: activity.program_name,
          channel: activity.channel,
          sent: 0,
          delivered: 0,
          unsubscribed_total: 0,
          open: 0,
          leads: [],
          clicked: 0,
        };

      if (!activitiesByEmail[emailAndProgram]) return;
      activitiesByEmail[emailAndProgram].leads.push(activity.lead_id);
      if (activity.activity_type_id == "6")
        activitiesByEmail[emailAndProgram].sent += 1;
      else if (activity.activity_type_id == "7")
        activitiesByEmail[emailAndProgram].delivered += 1;
      else if (activity.activity_type_id == "10")
        activitiesByEmail[emailAndProgram].open += 1;
      else if (activity.activity_type_id == "11")
        activitiesByEmail[emailAndProgram].clicked += 1;
      else if (activity.activity_type_id == "9")
        activitiesByEmail[emailAndProgram].unsubscribed_total += 1;
    });

    let statsByLead = await rds.execute(
      knex.table("lead_rates").select(),
      true
    );

    let statsByLeadMap = {};
    statsByLead.forEach((lead) => {
      statsByLeadMap[lead.lead_id] = lead;
    });

    const emails = [];
    Object.values(activitiesByEmail).forEach((item) => {
      const leads = item.leads.map((lead_id) => {
        console.log(lead_id, statsByLeadMap[lead_id]);
        return statsByLeadMap[lead_id];
      });

      const expected = {
        open_average: getAverage(leads, "open"),
        clicked_average: getAverage(leads, "clicked"),
        delivered_average: getAverage(leads, "delivered"),
      };

      const actual = {
        open_rate: priceDiff(item.delivered, item.open),
        clicked_rate: priceDiff(item.delivered, item.clicked),
        delivered_rate: priceDiff(item.sent, item.delivered),
        unsubscribed_rate: priceDiff(item.delivered, item.unsubscribed_total),
      };

      let valueRow = {
        ...item,
        leads_count: item.leads.length,
        leads: null,
        ...actual,
        open_average: expected.open_average,
        clicked_average: expected.clicked_average,
        delivered_average: expected.delivered_average,
        expected_open_range_low: ceroTo100(expected.open_average * 0.7),
        expected_open_range_high: ceroTo100(expected.open_average * 1.1),
        expected_clicked_range_low: ceroTo100(expected.clicked_average * 0.7),
        expected_clicked_range_high: ceroTo100(expected.clicked_average * 1.1),
        expected_delivered_range_low: ceroTo100(
          expected.delivered_average * 0.7
        ),
        expected_delivered_range_high: ceroTo100(
          expected.delivered_average * 1.1
        ),
      };

      valueRow = {
        ...valueRow,
        open_label: getLabel(
          actual.open_rate,
          valueRow.expected_open_range_low,
          valueRow.expected_open_range_high
        ),
        click_label: getLabel(
          actual.click_rate,
          valueRow.expected_clicked_range_low,
          valueRow.expected_clicked_range_high
        ),
        delivered_label: getLabel(
          actual.sent_rate,
          valueRow.expected_delivered_range_low,
          valueRow.expected_delivered_range_high
        ),
      };

      if (valueRow.sent > 100) emails.push(valueRow);
    });

    let fields = [
      "channel",
      "program",
      "region",
      "email",
      "sent",
      "delivered",
      "open",
      "clicked",
      "unsubscribed_total",
      "delivered_rate",
      "open_rate",
      "clicked_rate",
      "unsubscribed_rate",
      "delivered_average",
      "open_average",
      "clicked_average",
      "expected_open_range_low",
      "expected_open_range_high",
      "expected_clicked_range_low",
      "expected_clicked_range_high",
      "delivered_label",
      "open_label",
      "click_label",
    ];

    emails.sort(
      firstBy("channel")
        .thenBy(function (v1, v2) {
          const v1n = v1.program.split(".")[0];
          const v2n = v1.program.split(".")[0];
          if (v1n > v2n) return 1;
          else if (v1n < v2n) return -1;
          else return 0;
        })
        .thenBy("email")
    );

    var i,
      j,
      temparray,
      chunk = 500;
    for (i = 0, j = emails.length; i < j; i += chunk) {
      temparray = emails.slice(i, i + chunk);

      console.log("PING", "Inserting", temparray.length);

      await rds.execute(
        knex.table("email_stats").delete().where({
          week: moment().week(),
          year: moment().year(),
        })
      );

      await rds.execute(
        knex.table("email_stats").insert(
          temparray.map((item) => {
            return {
              week: moment().week(),
              year: moment().year(),
              channel: item.channel,
              program: item.program,
              region: item.region,
              email: item.email,
              sent: item.sent,
              delivered: item.delivered,
              open: item.open,
              clicked: item.clicked,
              unsubscribed: item.unsubscribed_total,
              delivered_rate: item.delivered_rate,
              open_rate: item.open_rate,
              clicked_rate: item.clicked_rate,
              unsubscribed_rate: item.unsubscribed_rate,
              delivered_average: item.delivered_average,
              open_average: item.open_average,
              clicked_average: item.clicked_average,
            };
          })
        )
      );
    }

    let opts = { fields };
    parser = new Parser(opts);
    const emailsCsv = parser.parse(emails);

    const emailsCsvId = uuidv4();
    var params = {
      Body: emailsCsv,
      Bucket: "response.mogi.ai",
      Key: `${emailsCsvId}.csv`,
      ContentType: "text/csv",
    };
    await s3.putObject(params).promise();

    await slack.chat.postMessage({
      text: `Emails By Week ${startOfWeek.format(
        "YYYY-MM-DD"
      )} - ${endOfWeek.format(
        "YYYY-MM-DD"
      )}: http://response.mogi.ai/${emailsCsvId}.csv \n`,
      channel: slack.channelsMap["analytics-email-results"].id,
    });
  } catch (e) {
    console.log(e);
  }
};

function getRange(leads, value) {
  const values = leads
    .filter((item) => item)
    .map((item) => item[value + "_rate"]);

  const sd = standardDeviation(values);

  return sd;
}

function getAverage(leads, value) {
  const values = leads
    .filter((item) => item)
    .map((item) => item[value + "_rate"]);

  const avg = average(values);

  return avg;
}

function standardDeviation(values) {
  var avg = average(values);

  var squareDiffs = values.map(function (value) {
    var diff = value - avg;
    var sqrDiff = diff * diff;
    return sqrDiff;
  });

  var avgSquareDiff = average(squareDiffs);

  var stdDev = Math.sqrt(avgSquareDiff);
  return stdDev;
}

function average(data) {
  var sum = data.reduce(function (sum, value) {
    return sum + value;
  }, 0);

  var avg = sum / data.length;
  return avg;
}

function priceDiff(a, b) {
  let deltaD = 0;

  if (b == null) b = 0;
  if (a == null) a = 0;

  if (a < b) deltaD = 100;
  else deltaD = (b / a) * 100;

  return parseInt(deltaD * 100) / 100;
}

function ceroTo100(value) {
  if (value < 0) return 0;
  if (value > 100) return 100;
  return value;
}

function getLabel(value, expected) {
  if (value / expected < 0.3) return "SOMETHING WENT WRONG";
  else if (value / expected >= 0.5) return "BELOW EXPECTATIONS";
  else if (value / expected >= 0.7) return "JUST BELOW EXPECTED";
  else if (value / expected >= 1.1) return "AS EXPECTED";
  else if (value / expected > 1.1) return "BETTER THAN EXPECTED";
  return "BELOW BELOW EXPECTATIONS";
}
